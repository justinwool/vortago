Show Code,Date,People,Media Type,Media Code,Media URL,Media Title,Media Description220,9/23/14,Christine Flood,1,QcwyKLlmXeY,,"""Shenandoah: An open source pauseless GC for OpenJDK."" by Christine Flood","Back in the lisp machine days hitting a GC pause meant it was time to go get a cup of coffee. Java Virtual Machines (JVMs) do better by using parallel (multiple threads working together) and concurrent (gc threads working while the mutator is running) techniques however pauses still cost time and in the case of online transactions money. This talk will discuss a new GC algorithm being developed at Red Hat for OpenJDK. Shenandoah is the first open-source OpenJDK GC algorithm that does marking and evacuation concurrently with running Java threads. This allows us to keep our pause times under 10ms even for heaps of 100+GBs. by Christine Flood - Red Hat Christine H. Flood has been designing and implementing programming languages for over 20 years. Starting with Lisp machines, dabbling with implicitly parallel languages like ID and Fortress and diving into the bits of Java Virtual Machine implementations. She's written multiple papers on GC algorithms and is delighted to be taking them to the next level for OpenJDK."220,9/22/14,Martin Thompson,1,tM4YskS94b0,,"""Aeron: Open-source high-performance messaging"" by Martin Thompson","Does TCP not meet your required latency consistently? Is UDP not reliable enough? Do you need to multicast? What about flow control, congestion control, and a means to avoid head of line blocking that can be integrated with the application? Or perhaps you’re just fascinated by how to design for the cutting edge of performance? Maybe you have tried higher level messaging products and found they are way too complicated because of the feature bloat driven by product marketing cycles. Aeron takes it back-to-basics with a pure focus on performance and reliability. We have built it from the ground up with mechanical sympathy in its DNA. The data structures are lock-free, wait-free, copy-free, and even persistent for our functional friends. Interaction with the media is layered so you can swap between UDP, Inifiniband, or Shared Memory as required. Aeron is open-source with implementations in Java and C++ that interoperate. There are no unnecessary features to bloat the implementation, yet the design is open so that it can be composed into higher level abstractions. This talk will focus on the design of Aeron and what we learned trying to achieve very consistent performance. We will explore the challenges of dealing with reliable message delivery over UDP and the data structures necessary to support transmission and retransmission in in a lock-free and wait-free manner. by Martin Thompson (@mjpt777) Martin is a high-performance and low-latency specialist, with experience gained over two decades working on the bleeding edge of large transactional and big-data systems. He believes in Mechanical Sympathy, i.e. applying an understanding of the hardware to the creation of software as being fundamental to delivering elegant high-performance solutions. The Disruptor framework is just one example of what his mechanical sympathy has created. Martin was the co-founder and CTO of LMAX. He blogs at mechanical-sympathy.blogspot.com, and can be found giving training courses on performance and concurrency when he is not cutting code to make systems better."220,9/22/14,Michael Drogalis,1,vG47Gui3hYE,,"""Onyx: Distributed Workflows for Dynamic Systems"" by Michael Drogalis","If you've ever jumped heads down into a codebase maintaining complex distributed activity and tried to simplify or change the processing workflow, not only will you scratch your head for 7 sleepless nights before you can get anywhere, but you'll come to realize that workflows are often deeply complected with their mechanism of execution. In this talk, we'll survey contemporary frameworks such as Storm and Cascading. We'll identify the pain points that seem to crop up time and time again: workflow specification, stateful lifecycle management,and developer testing - to name a few. Onyx is a new distributed computation system written in Clojure that addresses these problems head-on. Hardware advancements in the last 10 years have enabled new designs that leverage fast networks and SSDs. Onyx takes advantage and adapts to this new environment. The concepts and tools discussed remove the incidental complexity that plagues modern frameworks. Attendees will come away with new perspective on leveraging immutability, persistent data structures, queues, and transactions to tackle increasingly complex problem spaces. by Michael Drogalis (@MichaelDrogalis) Michael Drogalis is a software engineering consultant who mainly focuses on Clojure and Datomic"220,9/22/14,Daira Hopwood,1,oPeo0upCGqo,,"""How to make error handling less error-prone"" by Daira Hopwood","Error handling is one of the most difficult problems in computer science and in practical programming. Incorrect error handling often leads to security vulnerabilities (such as many of the recent spate of bugs found in TLS implementations), data loss, and user frustration. In this talk, we'll first discuss why programs using existing error handling styles and mechanisms (return and status code checking, conditions and restarts, and exceptions) often fail to recover correctly from errors. We argue that this is due to a fundamental conflict between encapsulation and having enough information to recover a consistent state.Then we explain how this conflict can be solved by providing language support for automatically recovering the state before the call that failed, so that failures cannot cause inconsistency. We also describe how the 'Ken' protocol complements this automatic recovery and extends it to asynchronous and distributed systems. by Daira Hopwood (@DairaHopwood) - LeastAuthority.com Daira Hopwood works on cloud storage systems for LeastAuthority.com. Ze has a long-standing interest in programming language research and security, and after 20 years has finally turned that into a concrete language design. Daira is transgender and uses 'ze/hir' pronouns."220,9/22/14,Doug Rohrer,1,a-OCorBXX7M,,"""Elixir and the Internet of Things"" by Doug Rohrer","The Internet of Things is upon us and being able to efficiently interconnect things will become increasingly difficult as more of them become available. How can we handle the stampede of connecting devices efficiently? When Ruby failed to live up to the task, we turned to Elixir and Erlang and were astonished by the results. This session will showcase the use of Elixir for a real-world production system. We will walk though the actual code and discuss some of the struggles we faced while learning (enough) Erlang and Elixir to get things up and running. At the end of the presentation, you will have a basic understanding of Erlang's OTP behaviors, realize the importance of restart strategies, know what an ""Acceptor Pool"" is, and how we built one without knowing it. by Doug Rohrer (@JeetKunDoug) Doug has over 20 years of software development experience in complex business and scientific systems. After almost a decade in consulting, he took several years to work with product companies, including what might have been the first application monitoring system for cloud computing applications that itself ran in the cloud. In late 2012, he took a sharp left turn from the world of .Net to focus on Ruby on Rails and other open-source systems, and has a passion for IoT problems based on his work with Nexia Home intelligence and Elixir/Erlang."220,9/22/14,Paul Betts,1,1XNATGjqM6U,,"""FRP In Practice: Taking a look at Reactive[UI/Cocoa]"" by Paul Betts","In this talk, we'll see how the Desktop team at GitHub has taken some of the principles behind Functional Reactive Programming and applied them extensively to today's UI toolkits. We'll dive into a case study of GitHub for Mac / Windows and their backing FRP libraries, ReactiveCocoa + ReactiveUI; we'll see what worked well, what we struggled with, and how to apply the beauty of FRP to languages and frameworks that are decidedly not designed with FRP in mind. by Paul Betts (@paulcbetts) - GitHub I'm a Windows / .NET Hacker for GitHub who graduated from The Ohio State University. In my spare time, I hack on some open-source software, play guitar and bass, and in general am within _ of really awesome."220,9/22/14,Yodit Stanton,1,PHF2P_ec_7s,,"""The Internet of Things in Practice"" by Yodit Stanton","We are at the dawn of an age of connected things, Internet of Things (IOT), some predict that there will be 25 billion new connected devices over the new few years. In this talk, we will peel away the hype and talk about the practicalities of managing IOT at scale. We will explore the protocols, the message queues and the eternal problem of standards. This talk will be a practical one where we will a demonstrate the ingestion and processing of IOT data using azondi, our opensource IOT message processing engine, built in clojure using Netty and implementing the LMAX reactor model. by Yodit Stanton (@yoditstanton) - opensensors.IO Yodit is a developer and founder of opensensors.IO, with a special interest in machine learning. She spends her time building systems for processing and analysing sensor data, as well as hacking clojure."220,9/22/14,Elise Huard,1,1MNTerD8IuI,,"""Writing a game in Haskell"" by Elise Huard","Haskell is a beautiful functional language, written by smart computer scientists, and having clever and elegant functional constructs. It clearly separates pure and impure parts of the program. Game programming on the other hand is a very hands-on discipline, trying to wring out the most of the machine's performance, and aiming for one thing, in disregard of all else: a pleasant, challenging experience for the player. I aim to bring intersect those worlds and describe the process, and the specifics, of writing a Haskell game. Functional reactive programming, bindings to graphical libraries, etc, will all have a role to play. by Elise Huard (@elise_huard) Elise Huard is a software consultant who's been crafting and bashing together software for about 15 years now. Her skill set comprises talking to people, Haskell, Clojure, R, javascript, ruby, C, scaling, and a good few bits and bobs beside. She's spoken at a fair number of conferences, most of them Ruby, some of them javascript, some of them polyglot. She's based in Berlin, Germany. She enjoys reading sci-fi, traveling, cooking, tinkering, and spending time with her husband and baby daughter."220,9/22/14,Ramsey Nasser|Tims Gardner,1,tJr_TD1BtF0,,"""Clojure in Unity 3D: Functional Video Game Development"" by Ramsey Nasser and Tims Gardner","Unity 3D is the de facto industry-standard platform for making games. It is built on Mono, scripted in C#, and exports to a wide range of systems, including OSX, Windows, Linux, iOS, Android, XBox, PlayStation, and the web. We are providing an open-source library integrating Clojure and Unity. Clojure will dramatically improve game development by bringing Lisp-style REPL-based live coding, optimizing macros, and DSLs to Unity's workflow. Persistent data structures will enable previously impossible computations in games, such as speculative AI algorithms, logic programming, and rewindable game state history. Unity's graphics and interaction stack opens up considerable power to Clojure programmers. Optimized 2D and 3D graphics, physics simulations, and integration with hardware such as the Kinect are examples of what is now available to functional programmers. Unity's extensive community and collection of prepackaged assets will make developing games in Clojure practical for the first time. Our talk will cover the indispensable role of platforms like Unity in professional game development, and the new possibilities afforded by its integration with a functional Lisp like Clojure. We will show a demo of our new workflow, discuss historical precedent for this initiative, and conclude with thoughts on future applications of our approach. by Ramsey Nasser (@ra), Tims Gardner (@timsgardner) Ramsey Nasser is a computer scientist, game designer, and educator based in Brooklyn. He researches programming languages by building tools to make computation more expressive and implementing projects that question the basic assumptions we make about code itself. His games playfully push people out of their comfort zones, and are often written in experimental programming languages of his design. A former Eyebeam fellow and a member of Kitchen Table Coders, when he is not reasoning about abstract unintuitive machines, he builds and maintains vintage motorcycles. Tims Gardner is an illustrator and Clojure programmer. His interests include symbolic computation, formal visualization, and psychedelic comics. He is a member of Kitchen Table Coders and aspires to cavitate the moon someday."220,9/22/14,Erin Swenson-Healey|James Cooper,1,3v03NFcyvzc,,"""Haste: Full-Stack Haskell for Non-PhD Candidates"" by Erin Swenson-Healey and James Cooper",220,9/22/14,David Greenberg,1,gVGZHzRjvo0,,"""Mesos: The Operating System for your Cluster"" by David Greenberg",220,9/22/14,Julia Evans,1,0IQlpFWTFbM,,"""You can be a kernel hacker!"" by Julia Evans","Writing operating systems sounds like it's only for wizards, but it turns out that operating systems are written by humans like you and me. I'm going to tell you what a kernel is and why you should care. Then we'll talk about a few concrete ways to get started with kernel hacking, ranging from the super-easy to the terrifyingly difficult. by Julia Evans (@b0rk) - Stripe Julia Evans loves taking apart systems to find how they work, making Serious Computer Programs do silly things, and organizing outreach events to make our developer communities a better place. She works on Stripe's data team."220,9/22/14,Felienne Hermans,1,0CKru5d4GPk,,"""Spreadsheets for developers"" by Felienne Hermans","Spreadsheets are often dismissed by developers for not being ""proper programming"" but that is not true. Since I have shown that spreadsheets are Turing complete (http://boingboing.net/2013/09/20/implementing-a-turing-machine.html) you have no excuse to diss them any longer. In this session, I will implement various algorithms in Excel to show you its power and elegance. After all, spreadsheets are 'live' and functional, so they have everything going for them. Furthermore they are very fit for TDD and rapid prototyping. Reasons for attending this talk: - Just as leaning a second natural language is healthy for your brain (http://www.huffingtonpost.com/dan-roitman/your-mind-on-language-howb3902184.html) so is leaning multiple programming languages. Thinking about familiar problems like sorting or shortest path in a strange environment like spreadsheet formulas is like a workout for your brain. - Next time you are in need of a quick calculation or prototype, do not have to waste time configuring a server and deploying your code. Surely not for everything, but for some problems, spreadsheets are really suited and this talk will teach you about how to handle those. - Being emerged in the world that many of your colleagues and clients live and breath will make it easier to understand them. ________ Don't fight spreadsheets any longer, but learn to love them. by Felienne Hermans (@felienne) _Felienne is a professor and an entrepreneur in the field of spreadsheets. Her PhD thesis which she defended in early 2013, centers on transferring techniques from software engineering, like testing and refactoring, to the world of spreadsheets. In 2010 Felienne founded Infotron, a start up that uses the algorithms she developed during her PhD project to help companies like KLM and ING bank to improve the quality of their spreadsheets. In her spare time, Felienne volunteers as a referee for the First Lego League, a world wide technology competition for kids."220,9/22/14,Mark Hibberd,1,JjYAnBhF2JU,,"""Towards ""annex"", a Fact Based Dependency System"" by Mark Hibberd",220,9/22/14,Aditya Siram,1,lMcRBdSdO_U,,"""Shen: A Sufficiently Advanced Lisp"" by Aditya Siram","Shen is an hosted Lisp that comes with a full-featured macro system, a Prolog, an optional type system more powerful than Haskell's, and does it all in under 5000 lines of code. It has been ported to many platforms including Java, JavaScript and Ruby. In the true Lisp spirit it gives complete freedom to the programmer. And this talk will introduce the language by demoing a complete web-application written in Shen that transitions effortlessly between functional, logic, and imperative styles, seamlessly intermixing macros, statically verified and dynamic code. by Aditya Siram (@deech) I am currently a web developer at Intoximeters, Inc. in St. Louis, Missouri. I do Ruby and JavaScript by day and Haskell and C by candlelight."220,9/22/14,Cliff Moon,1,X1rWgshr3PY,,"""Ludicrous Speed: Designing For Performance on the JVM"" by Cliff Moon","Over the past 3 years the JVM has largely overtaken C++ as the platform of choice for writing high performance software. The JVM / Java can be found powering HFT systems, low latency distributed databases, and real-time analytics platforms in almost every enterprise. During this talk you will come to understand the Java memory and concurrency models, how they interact with modern architectures, and the implications for how you ought to design your software. I will share my experiences designing, scaling and tuning a massive scale real-time analytics system, both the failures and the successes. by Cliff Moon (@moonpolysoft) - Boundary Cliff Moon is the founder and CTO of Boundary. Cliff has lead the building of Boundary's streaming ______________ analytics technology, which processes over 2 trillion metrics per day. Previously, Cliff was a leading engineer at Powerset, which was acquired by Microsoft. While there, Cliff helped kick off the NoSQL movement with his open source Dynomite project."220,9/22/14,Brandon Philips,1,HJIjTTHWYnE,,"""etcd: distributed locking and service discovery"" by Brandon Philips",220,9/22/14,Eric Evans,1,ovMo5pIMj8M,,"""Time Series Data With Apache Cassandra"" by Eric Evans",220,9/22/14,Stefanie Schirmer,1,anj_-Z2L4J0,,"""Dynamic programming at ease - with Grammars, Algebras, Products"" by Stefanie Schirmer",220,9/21/14,Kyle Kingsbury,1,QdkS6ZjeR7Q,,"""Jepsen II: Linearizable Boogaloo"" by Kyle Kingsbury","What is ACID anyway, and why is everyone so uptight about it? When can't we have eventual consistency, and what do we sacrifice in exchange for stronger models? I've spent the last year trying to wrap my head around consistency in distributed systems, and testing databases to see how those consistency models play out in practice. In this talk we'll explore linearizability--one of the strongest consistency models for a concurrent system--move from an academic definition to an intuitive understanding, and see the ways in which databases succeed--and fail--to live up to their consistency claims. by Kyle Kingsbury (@aphyr) - Factual Kyle is the author of Riemann, Timelike, Jepsen, Knossos, and a host of other open-source libraries. He works as a backend engineer at Factual."220,9/21/14,Michael Nygard,1,N5HyVUPuU0E,,"""Simulation Testing"" by Michael Nygard","Testing is not about proving a system is correct. It's a search problem. We look for paths through state space that result in errors. Unit testing explores a tiny subset of possible pathways. Even 100% unit test coverage doesn't guarantee 100% state space coverage. Scripted automated tests are only as rigorous as your most devious testers' imaginations. We can improved our results with controlled randomness. We can simulate inputs to the system under test, using randomness to broaden our search of the state space. At the same time, we control the randomness to ensure our tests are repeatable and that we can verify when bugs are fixed. This talk will introduce the structure of simulation testing as a general technique. We will briefly discuss the Simulant open source framework as an instantiation of these ideas. by Michael Nygard (@mtnygard) - Cognitect Michael Nygard strives to raise the bar and ease the pain for developers around the world. He shares his passion and energy for improvement with everyone he meets, sometimes even with their permission. Living with systems in production taught Michael about the importance of operations and writing production-ready software. Highly-available, highly-scalable commerce systems are his forte. Michael has written and co-authored several books, including ""97 Things Every Software Architect Should Know"" and the best seller ""Release It!"", a book about building software that survives the real world."220,9/21/14,Aaron Bedra,1,cp-Tr0ixCRM,,"""Deterministic Memory Management for Managed Runtimes"" by Aaron Bedra","Following close on the heels of heartbleed we have seen a resurgence in questioning C as the implementation choice for critical infrastructure. With performance innovations on managed runtimes the option to implement more and more critical pieces in alternative languages is becoming tangible. Of course this brings along with it a different set of problems. To re-write a system like OpenSSL or even just to implement SSL/TLS on top of a managed runtime there are some serious obstacles to overcome. This talk will examine solving the memory management problem present when building cyrptographic systems on top of managed runtimes. It's no secret that key material and other such sensitive data should be able to be properly allocated and erased from memory with certainty. Aaron will detail the problem with a small implementation of a common cryptographic system and demonstrate how the issue surfaces. He will then detail what steps need to be taken to solve this issue and re-examine the suitability of using these platforms for critical infrastructure. by Aaron Bedra (@abedra) Aaron is a Senior Fellow at Groupon. He is the creator of Repsheet, an open source threat intelligence and reputation tool for web applications. Aaron is a co-author of Programming Clojure 2nd Edition and a constant contributor to open source software."220,9/21/14,Jonas Bonér,1,U1C5m8b0qg0,,"""The Road to Akka Cluster, and Beyond"" by Jonas Bonér",220,9/21/14,Tiark Rompf,1,NTAJNYcsAEE,,"""How types can turn a SQL interpreter into a SQL compiler"" by Tiark Rompf","Commercial and open source database systems consist of millions of lines of highly optimized C code. Yet, their performance on individual queries falls 10x or 100x short of what a hand-written, specialized, implementation of the same query can achieve. In a recent joint project at Oracle Labs and the DATA Lab at EPFL, we have set out to implement a database query engine in Scala. With just about 3000 lines of Scala code, our prototype supports the full TPCH benchmark suite and runs queries several times as fast as highly-tuned commercial systems (> 10x peak speedup). This talk will focus on the key design principle that sets the system apart from other DB engines: where other systems interpret query plans, operator by operator, we generate and compile low-level C code for whole queries using the LMS (Lightweight Modular Staging) framework. _________ In particular, the talk will discuss powerful generative programming patterns such as mixed-stage data structures that contains both static and dynamic parts (e.g. static schema and dynamic values for data records) and staged interpreters which can be mechanically turned into compilers (e.g. for SQL queries or regular expressions). These generative programming techniques provide a high degree of abstraction without performance penalty, and make Scala and LMS a more productive alternative to C for systems-level programming where the last drop of performance matters. by Tiark Rompf (@tiarkrompf) - Oracle Labs Tiark Rompf is a researcher at Oracle Labs. His work focuses on runtime code generation, advanced compiler technology, and associated language support. From 2008 to 2014 he was a member of Martin Odersky's Scala team at EPFL where he developed the LMS compiler framework and made various contributions to the Scala language and toolchain (delimited continuations, efficient immutable data structures, compiler speedups, type system work). He is a regular speaker at conferences."220,9/21/14,David Renshaw,1,A65w-qoyTYg,,"""Cap'n Proto and Rust: Type Systems for Sharing"" by David Renshaw",220,9/21/14,Chris Morgan,1,jVoFws7rp88,,"""Fast, secure, safe: the web that can still be"" by Chris Morgan",220,9/21/14,Ariel Weisberg,1,EmiIUW4splQ,,"""Taming the 9s"" by Ariel Weisberg",220,9/21/14,Aysylu Greenberg,1,XmImGiVuJno,,"""Benchmarking: You're Doing It Wrong"" by Aysylu Greenberg",220,9/21/14,Katie Miller,1,uwrCQmpZ8Ts,,"""Coder Decoder: Functional Programmer Lingo Explained, with Pictures"" by Katie Miller","For the uninitiated, a conversation with functional programmers can feel like ground zero of a jargon explosion. This talk will help you to defend against the blah-blah blast by demystifying several terms commonly used by FP fans with bite-sized Haskell examples and friendly pictures. The presentation will also offer a glimpse of how some of these concepts can be applied in a simple Haskell web application. Expect appearances by Curry, Lens, and the infamous M-word, among others. by Katie Miller (@codemiller) Katie Miller, also known as codemiller, is a polyglot programmer with a penchant for Haskell. The former newspaper journalist works as an OpenShift Developer Advocate at Red Hat and co-authored the O'Reilly book Getting Started with OpenShift. Katie co-founded the Lambda Ladies group for women in functional programming and serves as one of the organisers of the Brisbane Functional Programming Group. The Aussie software engineer is passionate about coding, open source, software quality, languages of all kinds, and encouraging more girls and women to pursue careers in technology."220,9/21/14,Martin Kleppmann,1,fU9hR3kiOK0,,"""Turning the database inside out with Apache Samza"" by Martin Kleppmann",220,9/21/14,Dann Toliver,1,2XH_q494U3U,,"""Visualizing Persistent Data Structures"" by Dann Toliver",220,9/21/14,Stephen Asbury,1,JG2ESDGwHHY,,"""The Eight Fallacies of Distributed Computing"" by Stephen Asbury",220,9/21/14,Heather Miller,1,coX9RKH4rOs,,"""Function Passing Style: Typed, Distributed Functional Programming"" by Heather Miller",220,9/21/14,Mark Allen,1,jmRE5pXFi04,,"""All of this has happened before, and it will all happen again."" by Mark Allen",220,9/21/14,Pavol Bielik,1,P4Y_fif_htc,,"""EventRacer: Finding Concurrency Errors in Event-Driven Applications"" by Pavol Bielik","We have recently shown that event-driven applications such as Web pages and Android applications are susceptible to concurrency errors. Perhaps counter-intuitively, these races occur despite the fact that the application often runs in a single thread. Such races are subtle, hard to detect yet may cause serious damage: JavaScript crashes, lost e-mails, broken UIs, broken analytics, etc. In this talk, I propose to discuss EventRacer (http://www.eventracer.org/), a powerful new open-source analysis system developed at the Software Reliability Lab at ETH Zurich, that finds harmful concurrency errors in event-driven applications such as web pages and Android applications. I will illustrate how these concurrency errors can occur in real-world applications as well as the key analysis mechanisms behind EventRacer: a scalable algorithm that uses graph connectivity based on chain decomposition. This algorithm significantly outperforms existing state-of-the-art detectors in both space and time (often by a factor of 100). uncovered races, a special class of races that are not affected by user-written ad-hoc synchronization. Uncovered races are key to reducing the number of false positives reported by the analysis. a practical set of patterns which further allow us to reduce the false positives and make the tool practical. Finally, I will demo the system on real world applications (e.g. Google Maps, open-source Android apps) and discuss various future directions including extending the system, new UI navigation, statistical classification of reports, and others. We believe that EventRacer can be a valuable tool in the life of everyday web and Android developers. by Pavol Bielik - ETH Zurich Pavol Bielik is a PhD student at the Software Reliability Lab at ETH Zurich. He is passionate about mobile technologies and competed at the University Mobile Challenge World Finals hosted at GSMA Mobile World Congress'14. He developed EventRacer for Android - an end-to-end race detection tool for _______ Android applications that discovers concurrency bugs. His interests include program analysis, machine learning and parallel and high performance computing."220,9/21/14,Ian Davis,1,TihhFQjtiZU,,"""The challenges and benefits of a functional reactive frontend"" by Ian Davis",220,9/21/14,Bodil Stokke,1,yIlDBPiMb0o,,"""PureScript (Maybe This Time We Get JavaScript Right)"" by Bodil Stokke","The web browser is the world's most ubiquitous user interface. Sadly, this means we're all basically stuck in an abusive relationship with JavaScript. Obviously not a desirable position to find ourselves in, we've tried breaking out of the JS trap in a variety of ways: JS dialects (solving no design flaws but at least looking prettier) and JS as a compilation target (resulting, mostly, in unappealingly large output to support the emulated runtimes). So when I found myself having to build a system with real deliverable size constraints, my only options seemed to be JS itself, or TypeScript, which doesn't add much to JS but at least provides a modicum of type checking. After a few months of fighting TypeScript, though, I'd had enough. Happily, my frustration coincided with the advent of PureScript. At first glance, PureScript looks and feels like Haskell, but there's hardly any extraneous machinery. The PureScript compiler generates very concise JS, and the language itself is designed with the platform's constraints in mind. Yet it offers things like higher kinded polymorphism, type classes and similar deep Haskell magic. More appealingly, it comes with a growing number of libraries for coping with the browser as a platform: functional DOM manipulation, reactive programming, and more. It turned out to be a delight, getting out of my tangled mess of JavaScript and rebuilding it all in PureScript, and I'd like to show you how and why. by Bodil Stokke (@bodil) - Future Ad Labs Bodil is a compulsive conference speaker in the fields of functional programming and internets technologies, and is a co-organiser of multiple developer conferences in Scandinavia and the UK, mostly because she's still learning how to stop. She is a prolific contributor to the Free Software community, and has recently taken up designing new programming languages as a hobby. In her spare time, she works as a developer for Future Ad Labs, a London based startup that wants to make advertising a productive member of society. Her favourite pony is Pinkie Pie."220,9/21/14,Evan Czaplicki,1,Agu6jipKfYw,,"""Controlling Time and Space: understanding the many formulations of FRP"" by Evan Czaplicki","Functional Reactive Programming (FRP) is becoming an increasingly common way to structure event- driven code, but the term ""FRP"" actually refers to a large body of increasingly diverse work. This talk will quickly cover the basics of FRP, and then go into a couple different formulations of FRP that people are beginning to use. We will explore how these formulations fit together historically and theoretically. Finally, we will see how the particular variation of FRP used in Elm makes it easy to implement hot- swapping and Elm's Time Traveling Debugger. by Evan Czaplicki (@czaplic) - Prezi I am a functional programmer at heart, and my broad goal is to provide the tools and learning resources to make functional languages common in industry. I develop Elm 's compiler, tools, and community to make it great for projects within Prezi and in industry in general."220,9/21/14,Jessica Kerr,1,yhguOt863nw,,"""Concurrency Options on the JVM"" by Jessica Kerr",220,9/21/14,Gian Merlino|Fangjin Yang,1,fZGlmVMdKDs,,"""Building Real-time Systems with Open Source Technologies"" by Gian Merlino and Fangjin Yang",220,9/21/14,Michael Hendricks,1,G_eYTctGZw8,,"""Production Prolog"" by Michael Hendricks",220,9/21/14,Ryan Brush,1,Z6oVuYmRgkk,,"""Retaking Rules for Developers"" by Ryan Brush",220,9/21/14,Anne Ogborn,1,JmOHV5IlPyU,,"""Distributed SWI-Prolog Development"" by Anne Ogborn",220,9/21/14,Richard Feldman,1,WqV5kqaFRDU,,"""Web Apps without Web Servers"" by Richard Feldman",220,9/21/14,Michelle Brush,1,uEBzS9tpmTo,,"""Practical Fractals in Space"" by Michelle Brush",220,9/21/14,Julie Lavoie,1,OYZEVDIKN8c,,"""Analyzing Rap Lyrics Using Python"" by Julie Lavoie",220,9/21/14,Chris Williams,1,9xbrMTieJa0,,"""Democratizing Hardware"" by Chris Williams",220,9/21/14,Larry Ogrodnek,1,b5xPlZ1XQGg,,"""Building Analog Displays for Your Data"" by Larry Ogrodnek",220,9/21/14,Sarah Groff Palermo,1,FJpb1j2SWfA,,"""Art.js: Transfigure Data to Create 21st Century Art"" by Sarah Groff Palermo",220,9/21/14,Attila Szegedi,1,KKaHkkpdHxg,,"""Nashorn: implementing a dynamic language runtime on JVM in 2014"" by Attila Szegedi",220,9/21/14,Stephen Kell,1,LwicN2u6Dro,,"""Liberating the Smalltalk lurking in C and Unix"" by Stephen Kell",220,9/20/14,Sam Neubardt,1,-woCYVaMBsg,,"""Highly Concurrent Services with Finagle & Clojure"" Sam Neubardt",220,9/20/14,David McNeil,1,oPv-TY_XQ60,,"""A core.async Debugging Toolkit"" by David McNeil",220,9/20/14,Rob Lyndon,1,_IFJ4eCBvRo,,"""Vulpes: A functional approach to deep machine learning on the GPU"" by Rob Lyndon",220,9/20/14,Jamison Dance,1,QAwbjMdXj-Y,,"""DOMStep: Audio Synthesis, AI and a JavaScript Dance Party"" by Jamison Dance",220,9/20/14,Jason Hemann|Daniel Friedman,1,RG9fBbQrVOM,,"""Write the Other Half of Your Program"" by Jason Hemann and Daniel Friedman","""Write the Other Half of Your Program: From Functional to Logic Programming"" by Jason Hemann and Daniel Friedman"220,9/20/14,Peter Bourgon,1,em9zLzM8O7c,,"""Consistency without consensus in production systems"" by Peter Bourgon",220,9/20/14,Ambrose Bonnaire Sergeant,1,a0gT0syAXsY,,"""Typed Clojure in Practice"" by Ambrose Bonnaire Sergeant","Typed Clojure is an optional type system for Clojure. Typed Clojure is being used in production systems to help programmers verify, document and design correct Clojure code. In this talk, we introduce the goals of Typed Clojure and discuss how effectively Typed Clojure works in practice. We give an overview of the kinds of problems being solved today with Typed Clojure, and where your Clojure projects might benefit from a type system like it. by Ambrose Bonnaire-Sergeant (@ambrosebs) Ambrose is the creator of Typed Clojure."220,9/20/14,Brian McKenna,1,4i7KrG1Afbk,,"""Idris: Practical Dependent Types with Practical Examples"" by Brian McKenna","Dependent types turn types into a first-class language construct and allows types to be predicated upon values. Allowing types to be controlled by ordinary values allows us to prove many more properties about our programs and enables some interesting forms of metaprogramming. We can do interesting things like write a type-safe printf or verify algebraic laws of data structures - but while dependent types are quickly gaining in popularity, it can be tricky to find examples which are both useful and introductory. This talk will demonstrate some practical dependent typing examples (and not sized vectors) using Idris, a language designed for writing executable programs, rather than just proving theorems. by Brian McKenna (@puf nfresh) Brian McKenna is a small contributor to the Idris and PureScript languages. He also makes video tutorials on writing programs in Idris so that others can get started with dependent types. Brian works professionally as a functional programmer at a startup, using tools such as Scala and Haskell to create products for utility companies."220,9/20/14,Paul Snively|Amanda Laucher,1,SWTWkYbcWU0,,"""Type Systems - The Good, Bad and Ugly"" by Paul Snively and Amanda Laucher",220,9/20/14,Leo Meyerovich,1,M4Gsl8sVgdQ,,"""The Sociology of Programming Languages"" by Leo Meyerovich",220,9/20/14,Will Wilson,1,4fFDFbi3toc,,"""Testing Distributed Systems w/ Deterministic Simulation"" by Will Wilson",220,9/20/14,Michal Ptaszek,1,_jsMpmWaq7I,,"""Scaling League of Legends Chat to 70 million Players"" by Michal Ptaszek",220,9/20/14,Pete Hunt,1,IVvHPPcl2TM,,"""React: RESTful UI Rendering"" by Pete Hunt",React is a new a conceptual model for rendering user interfaces in a functional style. In this talk I'll look at how both the user-facing and implementation specifics resemble RESTful architectures and some interesting patterns and properties that fall out of this. by Pete Hunt (@floydophone) Pete works on Facebook's React team and manages the Instagram.com web team.220,9/20/14,Carin Meier|Sam Aaron,1,3_zW63dcZB0,,"""Our Shared Joy of Programming"" by Carin Meier and Sam Aaron","Have you ever had flying dreams? Or dreams that all of a sudden you finally understood it ""all""? These feelings are echoed in the joy we experience in learning, discovering, and creating as software developers. This talk will explore and celebrate this precious and fragile joy. We will look at ways to enhance it and avoid things that threaten to squash it. In particular, we see how it binds us all together as a community and how we can nurture it in each other. by Carin Meier (@gigasquid) and Sam Aaron (@samaaron) Carin started off as a professional ballet dancer, studied Physics in college, and has been developing software for both the enterprise and entrepreneur ever since. She has a thing for Clojure and can be usually found with a cup of tea in her hand, hacking on her Roomba and AR Parrot Drone.;Sam is a live coder and strongly believes in the importance of emphasising and exploring and celebrating creativity within all aspects of programming. He is the lead developer of Overtone a live coding music environment in Clojure, Quil a Clojure front-end to Processing and Sonic Pi a beginners music live coding environment used to teach programming within schools. Sam is also one half of the live coding duo Meta-eX."220,9/19/14,Rich Hickey,1,6mTbuzafcII,,"""Transducers"" by Rich Hickey","People keep implementing map, filter and other fundamental algorithms in different contexts - eagerly over collections, over lazy sequences, in parallel, over enumerables/iterables, over observables, over channels/streams etc. In addition to duplication of effort, this yields bloated APIs, and, when implemented in the classic way, often involves the creation of expensive intermediate objects/values that can be difficult to optimize away. Most problematic is that this approach keeps us from composing core algorithms in a context-independent way which would facilitate reuse and engender greater flexibility. This talk will describe transducers, a new library feature for Clojure (but of interest to other languages) that emphasizes composable, context-free, intermediate-free notions like 'mapping' and 'filtering' and their concrete reuse across all of the contexts above. by Rich Hickey (@richhickey) - Cognitect Rich Hickey, the author of Clojure and designer of Datomic, is a software developer with over 25 years of experience in various domains. Rich has worked on scheduling systems, broadcast automation, audio analysis and fingerprinting, database design, yield management, exit poll systems, and machine listening, in a variety of languages. Rich is CTO of Cognitect, Inc."220,9/19/14,Stephen Wolfram,1,EjCWdsrVcBM,,"""Inside the Wolfram Language"" by Stephen Wolfram","by Stephen Wolfram (@stephen_wolfram) - Wolfram Research Stephen Wolfram is the creator of Mathematica, Wolfram|Alpha and the Wolfram Language, as well as the author of A New Kind of Science. He's been doing a mixture of technology, basic science, business and language design for about 40 years-and building what's now the Wolfram Language for nearly 30 years."220,9/19/14,Nada Amin,1,SrKj4hYic5A,,"""Programming Should Eat Itself"" by Nada Amin","by Nada Amin (@nadamin) - EPFL Nada Amin is a member of the Scala team at EPFL, where she studies type systems and hacks on programming languages. She has contributed to Clojure's core.logic and Google's Closure compiler. She's loved helping others learn to program ever since tutoring SICP as an undergraduate lab assistant at MIT."220,9/19/14,Joe Armstrong,1,lKXe3HUG2l4,,"""The Mess We're In"" by Joe Armstrong","Joe Armstrong is one of the inventors of Erlang. When at the Ericsson computer science lab in 1986, he was part of the team who designed and implemented the first version of Erlang. He has written several Erlang books including Programming Erlang Software for a Concurrent World. Joe has a PhD in computer science from the Royal Institute of Technology in Stockholm, Sweden.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,